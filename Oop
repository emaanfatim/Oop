#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

// Define classes for Teacher, Classroom, Section, Course, and Student

class Teacher {
public:
    string name;

    Teacher(string n) : name(n) {}
};

class Classroom {
public:
    string name;

    Classroom(string n) : name(n) {}
};

class Section {
public:
    string name;
    vector<string> students; // List of student names

    Section(string n) : name(n) {}

    void addStudent(string studentName) {
        students.push_back(studentName);
    }
};

class Course {
public:
    string name;
    Teacher* teacher;
    Classroom* classroom;
    Section* section;
    string day;
    string time;

    Course(string n, Teacher* teacher, Classroom* classroom, Section* section, string d, string t) : name(n), teacher(teacher), classroom(classroom), section(section), day(d), time(t) {}
};

class Student {
public:
    string name;

    Student(string n) : name(n) {}
};

// Define the Timetable class

class Timetable {
private:
    vector<Course*> courses;
    unordered_map<string, vector<Course*>> studentCourses; // Map student names to courses
    unordered_map<string, vector<Course*>> teacherCourses; // Map teacher names to courses
    unordered_map<string, vector<Course*>> roomCourses; // Map room names to courses

public:
    void addCourse(Course* course) {
        courses.push_back(course);
        // Organize courses by student
        for (const auto& student : course->section->students) {
            studentCourses[student].push_back(course);
        }
        // Organize courses by teacher
        teacherCourses[course->teacher->name].push_back(course);
        // Organize courses by room
        roomCourses[course->classroom->name].push_back(course);
    }

    void displayStudentWiseTimetable() {
        cout << "Student-wise Timetable:\n";
        for (const auto& entry : studentCourses) {
            cout << "Student: " << entry.first << endl;
            for (Course* course : entry.second) {
                cout << "Course: " << course->name << ", Teacher: " << course->teacher->name << ", Classroom: " << course->classroom->name << ", Section: " << course->section->name << ", Day: " << course->day << ", Time: " << course->time << endl;
            }
            cout << endl;
        }
    }

    void displayTeacherWiseTimetable() {
        cout << "\nTeacher-wise Timetable:\n";
        for (const auto& entry : teacherCourses) {
            cout << "Teacher: " << entry.first << endl;
            for (Course* course : entry.second) {
                cout << "Course: " << course->name << ", Classroom: " << course->classroom->name << ", Section: " << course->section->name << ", Day: " << course->day << ", Time: " << course->time << endl;
            }
            cout << endl;
        }
    }

    void displayRoomWiseTimetable() {
        cout << "\nRoom-wise Timetable:\n";
        for (const auto& entry : roomCourses) {
            cout << "Room: " << entry.first << endl;
            for (Course* course : entry.second) {
                cout << "Course: " << course->name << ", Teacher: " << course->teacher->name << ", Section: " << course->section->name << ", Day: " << course->day << ", Time: " << course->time << endl;
            }
            cout << endl;
        }
    }

    void displayCoursesOnDayAndTime(string day, string time) {
        cout << "\nCourses on " << day << " at " << time << ":\n";
        for (Course* course : courses) {
            if (course->day == day && course->time == time) {
                cout << "Course: " << course->name << ", Teacher: " << course->teacher->name << ", Classroom: " << course->classroom->name << ", Section: " << course->section->name << endl;
            }
        }
        cout << endl;
    }

    void displayTimetableForDay(string day) {
        cout << "\nTimetable for " << day << ":\n";
        for (Course* course : courses) {
            if (course->day == day) {
                cout << "Course: " << course->name << ", Teacher: " << course->teacher->name << ", Classroom: " << course->classroom->name << ", Section: " << course->section->name << ", Time: " << course->time << endl;
            }
        }
        cout << endl;
    }
};

int main() {
    // Create Teachers
    Teacher* teacherSE1 = new Teacher("Sir Tamim");
    Teacher* teacherSE2 = new Teacher("Sir Waleed");
    Teacher* teacherSE3 = new Teacher("Sir Awais");
    Teacher* teacherSE4 = new Teacher("Ma'am Sadaf");
    Teacher* teacherSE5 = new Teacher("Sir Adeel");
    Teacher* teacherSE6 = new Teacher("Sir Zubair");
    Teacher* teacherSE7 = new Teacher("Ma'am Joddat");
    Teacher* teacherSE8 = new Teacher("Sir Raja");
    // Add more teachers as needed

    // Create Classrooms
    Classroom* classroom1 = new Classroom("Room 4-17");
    Classroom* classroom2 = new Classroom("Room 4-18");
    Classroom* classroom3 = new Classroom("Room 4-19");
    Classroom* classroom4 = new Classroom("Lab 4-01");
    Classroom* classroom5 = new Classroom("Lab 4-02");
    // Add more classrooms as needed

    // Create Sections
    Section* section1 = new Section("A");
    section1->addStudent("Madeiha");
    section1->addStudent("Emaan");
    
    Section* section2 = new Section("B");
    section2->addStudent("Afshan");
    section2->addStudent("Shumail");

    Section* section3 = new Section("C");
    section3->addStudent("Asma");
    
    // Add more sections as needed

    // Create Courses
    Course* course1 = new Course("OOP", teacherSE1, classroom1, section1, "Monday", "8:00 AM - 10:00 AM");
    Course* course2 = new Course("OOP Lab", teacherSE2, classroom4, section1, "Tuesday", "10:00 AM - 12:00 PM");
    Course* course3 = new Course("ISE", teacherSE3, classroom3, section1, "Wednesday", "2:00 PM - 4:00 PM");
    Course* course4 = new Course("DS", teacherSE4, classroom1, section2, "Thursday", "12:00 PM - 2:00 PM");
    Course* course5 = new Course("Calculus", teacherSE5, classroom2, section2, "Friday", "3:00 PM - 5:00 PM");
    Course* course6 = new Course("LA", teacherSE6, classroom1, section3, "Monday", "10:00 AM - 12:00 PM");
    Course* course7 = new Course("CF", teacherSE7, classroom3, section3, "Tuesday", "2:00 PM - 4:00 PM");
    Course* course8 = new Course("CP", teacherSE8, classroom5, section3, "Wednesday", "4:00 PM - 5:00 PM");
    // Add more courses as needed

    // Create a Timetable and add courses
    Timetable timetable;
    timetable.addCourse(course1);
    timetable.addCourse(course2);
    timetable.addCourse(course3);
    timetable.addCourse(course4);
    timetable.addCourse(course5);
    timetable.addCourse(course6);
    timetable.addCourse(course7);
    timetable.addCourse(course8);
    // Add more courses to the timetable as needed

    // Display the timetable student-wise, teacher-wise, and room-wise
    int choice;
    do {
        cout << "\nMenu:\n";
        cout << "1. Display Student-wise Timetable\n";
        cout << "2. Display Teacher-wise Timetable\n";
        cout << "3. Display Room-wise Timetable\n";
        cout << "4. Display Courses on a Specific Day and Time\n";
        cout << "5. Display Timetable for a Specific Day\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                timetable.displayStudentWiseTimetable();
                break;
            case 2:
                timetable.displayTeacherWiseTimetable();
                break;
            case 3:
                timetable.displayRoomWiseTimetable();
                break;
           case 4: {
    string day, time;
    cout << "Enter the day (e.g., Monday): ";
    cin >> day;
    cin.ignore(); // Consume newline character
    cout << "Enter the time (e.g., 8:00 AM): ";
    getline(cin, time); // Read the entire line for time input
    cout << "Entered day: " << day << ", Entered time: " << time << endl; // Debugging output
    timetable.displayCoursesOnDayAndTime(day, time);
    break;
}


     

            case 5: {
                string day;
                cout << "Enter the day (e.g., Monday): ";
                cin >> day;
                timetable.displayTimetableForDay(day);
                break;
            }
            case 6:
                cout << "Exiting program.\n";
                break;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    // Clean up memory
    delete teacherSE1;
    delete teacherSE2;
    delete teacherSE3;
    delete teacherSE4;
    delete teacherSE5;
    delete teacherSE6;
    delete teacherSE7;
    delete teacherSE8;
    delete classroom1;
    delete classroom2;
    delete classroom3;
    delete classroom4;
    delete classroom5;
    delete section1;
    delete section2;
    delete section3;
    delete course1;
    delete course2;
    delete course3;
    delete course4;
    delete course5;
    delete course6;
    delete course7;
    delete course8;
    return 0;
}
